import React, {useContext, useState, useEffect} from "react";
import {Link, Redirect, NavLink} from "react-router-dom";
import {useFormik} from "formik";
import { useToasts } from 'react-toast-notifications'
import * as R from 'ramda';

import Layout from 'conteiners/layout'
import {CurrentBasketContext} from "contexts/currentBasket";
import {CurrentUserContext} from 'contexts/currentUser';
import useFetch from 'hooks/useFetch'
import useLocalStorage from "hooks/useLocalStorage";
import {CLEAN_BASKET} from "actionTypes";
import {validate, validateOnCheckout} from "validation";
import {
    getBasketProductsWithCount,
    countOfProduct,
    productSubPrice,
    getTotalPrice,
    getUniqProducts
} from 'utils'


/**
 * Страница Оформления заказа. Можно оформить заказ и за одно зарегиться
 */
const Checkout = () => {
    const apiUrl = '/rest/cart'
    const apiCreateAccount = '/rest/authentication/register'
    const [currentBasketState, dispatchBasket] = useContext(CurrentBasketContext)
    const [currentUserState, dispatchUser] = useContext(CurrentUserContext)
    const products = getBasketProductsWithCount(currentBasketState)
    const [isOrderSuccess, setIsOrderSuccess] = useState(false)
    const [,setToken] = useLocalStorage('token')
    const [,setBasket] = useLocalStorage('productsIds')
    const [{response: createAccountResponse}, doCreateAccount] = useFetch(apiCreateAccount)
    const [{response}, doFetch] = useFetch(apiUrl)
    const { addToast } = useToasts()
    const [count, setCount] = useState(0)

    const formik = useFormik({
        initialValues: {
            name: currentUserState.currentUser ? currentUserState.currentUser.username : '',
            surname: currentUserState.currentUser ? currentUserState.currentUser.surname : '',
            organization: currentUserState.currentUser ? currentUserState.currentUser.organization : '',
            address: currentUserState.currentUser ? currentUserState.currentUser.address : '',
            phone: currentUserState.currentUser ? currentUserState.currentUser.phone : '',
            email: currentUserState.currentUser ? currentUserState.currentUser.email : '',
            comment: '',
            password: '',
            isCreateAcc: false,
            isCheckRules: false
        },
        validateOnChange: false,

        onSubmit:  values => {
            setCount(count + 1)
            if(count !== 1){
                return
            }
            if(values.isCreateAcc){
                doCreateAccount({
                    method: 'post',
                    data: {
                        id: null,
                        username: values.name,
                        surname: values.surname,
                        organization: values.organization,
                        email: values.email,
                        password: values.password,
                        phone: values.phone,
                        address: values.address}
                })
            }
            const vals = getUniqProducts(currentBasketState);
            const userTo = {
                id: null,
                username: values.name,
                surname: values.surname,
                organization: values.organization,
                email: values.email,
                password: values.password,
                phone: values.phone,
                address: values.address
            }
            doFetch({
                method: 'post',
                data: {
                    userTo,
                    products: vals,
                    comment: values.comment,
                    isCreateAccount: true
                }
            })

        },
        validate: values => {
            let errors = {}
            if (!values.isCheckRules && !currentUserState.isLoggedIn) {
                errors.isCheckRules = 'Если хотите продолжить надо согласиться с правилами!';
            }
            if(!currentUserState.isLoggedIn && values.isCreateAcc){
                let moreErrors = validate(values, false);
                return R.merge(errors, moreErrors)
            }
            if (!currentUserState.isLoggedIn && !values.isCreateAcc){
                return R.merge(errors, validateOnCheckout(values));
            }
            if(currentUserState.isLoggedIn){
                return validateOnCheckout(values)
            }
            return errors;
        },
    });

    useEffect(()=>{
        if(!response){
            return
        }
        addToast("Спасибо! Ваш заказ формируется!", {
            appearance: 'success',
            autoDismiss: true,})
        setBasket([])
        dispatchBasket({type: CLEAN_BASKET })
        setIsOrderSuccess(true)
    }, [response, setBasket, dispatchBasket, addToast])

    useEffect(()=>{
        if(!createAccountResponse || createAccountResponse.user === undefined ) {
            return
        }
        addToast("Ваш аккаунт успешно создан!", {
            appearance: 'success',
            autoDismiss: true,})
        setToken(createAccountResponse.token)
        dispatchUser({type: 'SET_AUTHORIZED', payload: createAccountResponse.user.userTo})
    }, [createAccountResponse, setToken, dispatchUser, addToast])

    if(isOrderSuccess){
        return <Redirect to='/'/>
    }

    const renderOrders = () =>{
        return (
        <div className="cart-list">
            <ul className="list">
                {products.map((item, index) => (
                    <li /*className="flex"*/ key={index}>
                        <Link to="/" title="" className="cart-product-image"><img
                            src={item.image} alt="Product"/></Link>
                        <div className="text">
                            <p className="product-name">{item.name}</p>
                            <div className="quantity">{`${countOfProduct(item, currentBasketState)} шт`}</div>
                            <p className="product-price">{`${productSubPrice(item, currentBasketState)} руб`}</p>
                        </div>
                    </li>
                ))}

            </ul>
        </div>
        )
    }

    return (
        <Layout>
            <div className="main-content space-padding-tb-70">
                <div className="container">

                    <form onSubmit={formik.handleSubmit}>
                        <div className="cart-box-container-ver2">
                            <div className="row">
                                <div className="col-md-8">
                                    <h3>Детали Заказа</h3>
                                    <div className="row form-customer">

                                        <div className="form-group col-md-6">
                                            <label htmlFor="inputfname_2" className=" control-label">Имя *</label>
                                            <input
                                                name="name"
                                                type="text"
                                                className="form-control form-account"
                                                placeholder="имя"
                                                value={formik.values.name}
                                                onChange={formik.handleChange}
                                            >
                                            </input>
                                            {formik.errors.name &&
                                            <div className="error-msg">
                                                {formik.errors.name}
                                            </div>}
                                        </div>

                                        <div className="form-group col-md-6">
                                            <label htmlFor="inputlname" className=" control-label">Фамилия *</label>
                                            <input
                                                name="surname"
                                                type="text"
                                                className="form-control form-account"
                                                placeholder='фамилия'
                                                value={formik.values.surname}
                                                onChange={formik.handleChange}
                                            />
                                            {formik.errors.surname &&
                                            <div className="error-msg">
                                                {formik.errors.surname}
                                            </div>
                                            }
                                        </div>

                                        <div className="form-group col-md-12">
                                            <label htmlFor="inputcompany" className=" control-label">
                                                Организация</label>
                                            <input
                                                name="organization"
                                                type="text"
                                                className="form-control form-account"
                                                placeholder='организация'
                                                value={formik.values.organization}
                                                onChange={formik.handleChange}
                                            />
                                        </div>

                                        <div className="form-group col-md-6">
                                            <label htmlFor="inputemail" className=" control-label">Email </label>
                                            <input
                                                name="email"
                                                type="email"
                                                className="form-control form-account"
                                                placeholder='почта'
                                                value={formik.values.email}
                                                onChange={formik.handleChange}
                                            />
                                            {formik.errors.email &&
                                            <div className="error-msg">
                                                {formik.errors.email}
                                            </div>
                                            }
                                        </div>
                                        <div className="form-group col-md-6">
                                            <label htmlFor="inputphone" className=" control-label">Телефон *</label>
                                            <input
                                                name="phone"
                                                type="text"
                                                className="form-control form-account"
                                                value={formik.values.phone}
                                                onChange={formik.handleChange}
                                                placeholder="телефон"
                                            />
                                            {formik.errors.phone &&
                                            <div className="error-msg">
                                                {formik.errors.phone}
                                            </div>
                                            }
                                        </div>
                                        <div className="form-group col-md-12">
                                            <label htmlFor="inputstreet" className=" control-label">Адрес доставки
                                                *</label>
                                            <input
                                                name="address"
                                                type="text"
                                                className="form-control form-account"
                                                placeholder='адрес'
                                                value={formik.values.address}
                                                onChange={formik.handleChange}
                                            />
                                            {formik.errors.address &&
                                            <div className="error-msg">
                                                {formik.errors.address}
                                            </div>
                                            }
                                        </div>
                                        {formik.values.isCreateAcc && (<div className="form-group col-md-12">
                                            <label htmlFor="inputstreet" className=" control-label">Пароль
                                                *</label>
                                            <input
                                                name="password"
                                                type="password"
                                                className="form-control form-account"
                                                placeholder='пароль'
                                                value={formik.values.password}
                                                onChange={formik.handleChange}
                                            />
                                            {formik.errors.password &&
                                            <div className="error-msg">
                                                {formik.errors.password}
                                            </div>
                                            }
                                        </div>)}

                                        {!currentUserState.isLoggedIn &&
                                        <div className="form-check col-md-6">
                                            <label className="form-check-label ver2">
                                                <input
                                                    name="isCreateAcc"
                                                    type="checkbox"
                                                    className="form-check-input"
                                                    value={formik.values.isCreateAcc}
                                                    onChange={formik.handleChange}
                                                />
                                                <span>Создать аккаунт?</span>
                                            </label>
                                        </div>}
                                        {!currentUserState.isLoggedIn &&
                                        <div className="form-check col-md-6">
                                            <label className="form-check-label ver2">
                                                <input
                                                    name="isCheckRules"
                                                    type="checkbox"
                                                    className="form-check-input"
                                                    value={formik.values.isCheckRules}
                                                    onChange={formik.handleChange}
                                                />
                                                <span>Я прочитал и принимаю
                                                <NavLink to='/policy'> Правила Конфиденциальности</NavLink>
                                                </span>
                                                {formik.errors.isCheckRules &&
                                                <div className="error-msg">
                                                    {formik.errors.isCheckRules}
                                                </div>}
                                            </label>
                                        </div>}

                                    </div>
                                    <h3>Комментарии к заказу</h3>
                                    <div className="row form-customer">
                                        <div className="form-group col-md-12">
                                            <textarea
                                                name="comment"
                                                rows="5"
                                                id="message"
                                                className="form-control form-note"
                                                placeholder="Здесь можно указать предпочтительное время или дату и прочие детали"
                                                value={formik.values.comment}
                                                onChange={formik.handleChange}
                                            ></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div className="col-md-4">
                                    <h3>Ваш заказ</h3>
                                    {renderOrders()}

                                    <h3>Сумма:</h3>
                                    <div className="text-price">
                                        <ul>
                                            <li><span className="text">Сумма заказа</span><span
                                                className="number">{getTotalPrice(currentBasketState)}</span>
                                            </li>
                                        </ul>
                                    </div>
                                    <button type="submit" className="btn link-button hover-white btn-checkout" >Заказать</button>
                                </div>
                            </div>
                        </div>
                    </form>

                </div>
            </div>
        </Layout>
    )

}

export default Checkout