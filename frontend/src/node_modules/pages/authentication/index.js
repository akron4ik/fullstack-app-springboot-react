import React, {useState, useEffect, useContext, Fragment} from "react";
import {Link, Redirect} from 'react-router-dom'
import {useFormik} from 'formik'
import { useToasts } from 'react-toast-notifications'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import Layout from 'conteiners/layout'
import {validate} from "validation";


/**
 * Страница Авторизации - Вход и Регистрация
 */
const Authentication = props => {
    const isLogin = props.match.path === '/login'
    const pageTitle = isLogin ? 'Вход' : 'Регистрация'
    const descriptionLink = isLogin ? '/register' : '/login'
    const apiUrlRegister = isLogin ? '/rest/authentication/login' : '/rest/authentication/register'
    const descriptionLinkName = isLogin ? 'Хочу зарегистрироваться' : 'Я уже зарегистрирован, войти'
    const [,setToken] = useLocalStorage('token')
    const [showMessage, setShowMessage] = useState(false)
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
    const [{response}, doFetch] = useFetch(apiUrlRegister)
    const { addToast } = useToasts()
    const [, dispatch] = useContext(CurrentUserContext)
    const [count, setCount] = useState(0)

    const formik = useFormik({
        initialValues: {
            name: '',
            surname: '',
            organization: '',
            address: '',
            phone: '',
            email: '',
            password: '',
            checkRules: false
    },
    validateOnChange: false,

    onSubmit:  values => {
        setCount(count + 1)
        if(count !== 1){
            return
        }
            if (isLogin) {
                doFetch({
                    method: 'post',
                    data: {username: values.email, password: values.password}

                })
                return
            }
            if (!isLogin && !values.checkRules) {
                setShowMessage(true)
            }

            if (values.checkRules) {
                doFetch({
                    method: 'post',
                    data: {
                        id: null,
                        username: values.name,
                        surname: values.surname,
                        organization: values.organization,
                        email: values.email,
                        password: values.password,
                        phone: values.phone,
                        address: values.address
                    }

                })
            }
        },
        validate: values => {
            let errors =  validate(values, isLogin)
            return errors;
        },



    });

    useEffect(()=>{
        if(!response || response.user === undefined ) {
            return
        }
        addToast("Вы успешно авторизовались!", {
            appearance: 'success',
            autoDismiss: true,})
        setToken(response.token)
        setIsSuccessfullSubmit(true)
        dispatch({type: 'SET_AUTHORIZED', payload: response.user.userTo})
    }, [response, setToken, dispatch])


    if(isSuccessfullSubmit){
        return  <Redirect to='/'/>
    }

    return (

        <Layout>
            <div className="container">
                <div className="row">
                    <div className="col-xs-12 col-sm-12">
                        <div className="customer-page">
                            <hr/>
                            <div className="title-page">
                                <h3>{pageTitle}</h3>
                            </div>

                            <form className="form-customer form-login" onSubmit={formik.handleSubmit}>
                                {!isLogin &&<div className="form-group">
                                    <label>Имя *</label>
                                    <input
                                        name="name"
                                        type="text"
                                        className="form-control form-account"
                                        placeholder="имя"
                                        value={formik.values.name}
                                        onChange={formik.handleChange}
                                    >
                                    </input>
                                    {formik.errors.name &&
                                    <div className="error-msg">
                                         {formik.errors.name}
                                    </div>
                                    }
                                </div>}
                                {!isLogin && <div className="form-group">
                                    <label>Фамилия *</label>
                                    <input
                                        name="surname"
                                        type="text"
                                        className="form-control form-account"
                                        placeholder='фамилия'
                                        value={formik.values.surname}
                                        onChange={formik.handleChange}
                                    />
                                    {formik.errors.surname &&
                                    <div className="error-msg">
                                        {formik.errors.surname}
                                    </div>
                                    }
                                </div>}
                                {!isLogin && <div className="form-group">
                                    <label>Организация</label>
                                    <input
                                        name="organization"
                                        type="text"
                                        className="form-control form-account"
                                        placeholder='организация'
                                        value={formik.values.organization}
                                        onChange={formik.handleChange}
                                    />
                                </div>}
                                {!isLogin && <div className="form-group">
                                    <label htmlFor="exampleInputEmail1">Адрес *</label>
                                    <input
                                        name="address"
                                        type="text"
                                        className="form-control form-account"
                                        placeholder='адрес'
                                        value={formik.values.address}
                                        onChange={formik.handleChange}
                                    />
                                    {formik.errors.address &&
                                    <div className="error-msg">
                                        {formik.errors.address}
                                    </div>
                                    }
                                </div>}

                                {!isLogin && <div className="form-group">
                                    <label htmlFor="exampleInputEmail1">Телефон *</label>
                                    <input
                                        name="phone"
                                        type="text"
                                        className="form-control form-account"
                                        value={formik.values.phone}
                                        onChange={formik.handleChange}
                                        placeholder="телефон"
                                    />
                                    {formik.errors.phone &&
                                    <div className="error-msg">
                                        {formik.errors.phone}
                                    </div>
                                    }
                                </div>}

                                <div className="form-group">
                                    <label htmlFor="exampleInputEmail1">Почта *</label>
                                    <input
                                        name="email"
                                        type="email"
                                        className="form-control form-account"
                                        placeholder='почта'
                                        value={formik.values.email}
                                        onChange={formik.handleChange}
                                    />
                                    {formik.errors.email &&
                                    <div className="error-msg">
                                        {formik.errors.email}
                                    </div>
                                    }
                                </div>
                                <div className="form-group">
                                    <label htmlFor="exampleInputPassword1">Пароль *</label>
                                    <input
                                        name="password"
                                        type="password"
                                        className="form-control form-account"
                                        placeholder='пароль'
                                        value={formik.values.password}
                                        onChange={formik.handleChange}
                                        /*pattern={/(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/}*/
                                    />
                                    {formik.errors.password &&
                                    <div className="error-msg">
                                        {formik.errors.password}
                                    </div>
                                    }
                                </div>
                                <button type="submit" className="btn link-button hover-white" >{pageTitle}</button>
                                <div className="form-check">

                                    {!isLogin && (
                                        <Fragment>
                                            {showMessage && <div className="error-msg"> Необходимо принять условия соглашения </div> }
                                            <label className="form-check-label">
                                                <input
                                                    name="checkRules"
                                                    type="checkbox"
                                                    className="form-check-input"
                                                    value={formik.values.checkRules}
                                                    onChange={formik.handleChange}
                                                />

                                                <span>
                                    Согласен с&nbsp;<a href="/policy"
                                                       className="paywall__auth__form__checkbox__link"
                                                       target="_blank">правилами</a> использования и&nbsp;обработки
                                    персональных данных
                                        </span>
                                            </label>

                                        </Fragment> )}
                                </div>
                            </form>


                            <span className="divider"></span>
                            <Link to={descriptionLink} className="btn link-button create-account hover-black">{descriptionLinkName}</Link>
                        </div>
                    </div>
                </div>
            </div>
        </Layout>
)
}

export default Authentication